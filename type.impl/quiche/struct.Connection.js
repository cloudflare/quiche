(function() {
    var type_impls = Object.fromEntries([["tokio_quiche",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CSslRef%3E-for-Connection%3CF%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#8640\">Source</a><a href=\"#impl-AsMut%3CSslRef%3E-for-Connection%3CF%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;SslRef&gt; for <a class=\"struct\" href=\"quiche/struct.Connection.html\" title=\"struct quiche::Connection\">Connection</a>&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"quiche/range_buf/trait.BufFactory.html\" title=\"trait quiche::range_buf::BufFactory\">BufFactory</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#8641\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut SslRef</h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<SslRef>","tokio_quiche::quic::QuicheConnection"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Connection%3CF%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#1975\">Source</a><a href=\"#impl-Connection%3CF%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"struct\" href=\"quiche/struct.Connection.html\" title=\"struct quiche::Connection\">Connection</a>&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"quiche/range_buf/trait.BufFactory.html\" title=\"trait quiche::range_buf::BufFactory\">BufFactory</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_keylog\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2244\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_keylog\" class=\"fn\">set_keylog</a>(&amp;mut self, writer: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>Sets keylog output to the designated <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html\"><code>Writer</code></a>.</p>\n<p>This needs to be called as soon as the connection is created, to avoid\nmissing some early logs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_qlog\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2259-2262\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_qlog\" class=\"fn\">set_qlog</a>(\n    &amp;mut self,\n    writer: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;,\n    title: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>,\n    description: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>,\n)</h4></section></summary><div class=\"docblock\"><p>Sets qlog output to the designated <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html\"><code>Writer</code></a>.</p>\n<p>Only events included in <code>QlogLevel::Base</code> are written. The serialization\nformat is JSON-SEQ.</p>\n<p>This needs to be called as soon as the connection is created, to avoid\nmissing some early logs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_qlog_with_level\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2277-2280\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_qlog_with_level\" class=\"fn\">set_qlog_with_level</a>(\n    &amp;mut self,\n    writer: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;,\n    title: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>,\n    description: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>,\n    qlog_level: <a class=\"enum\" href=\"quiche/enum.QlogLevel.html\" title=\"enum quiche::QlogLevel\">QlogLevel</a>,\n)</h4></section></summary><div class=\"docblock\"><p>Sets qlog output to the designated <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html\"><code>Writer</code></a>.</p>\n<p>Only qlog events included in the specified <code>QlogLevel</code> are written. The\nserialization format is JSON-SEQ.</p>\n<p>This needs to be called as soon as the connection is created, to avoid\nmissing some early logs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.qlog_streamer\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2338\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.qlog_streamer\" class=\"fn\">qlog_streamer</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"struct\" href=\"qlog/streamer/struct.QlogStreamer.html\" title=\"struct qlog::streamer::QlogStreamer\">QlogStreamer</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the QlogStreamer, if it exists.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_session\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2352\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_session\" class=\"fn\">set_session</a>(&amp;mut self, session: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Configures the given session for resumption.</p>\n<p>On the client, this can be used to offer the given serialized session,\nas returned by <a href=\"struct.Connection.html#method.session\"><code>session()</code></a>, for resumption.</p>\n<p>This must only be called immediately after creating a connection, that\nis, before any packet is sent or received.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_max_idle_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2381\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_max_idle_timeout\" class=\"fn\">set_max_idle_timeout</a>(&amp;mut self, v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the <code>max_idle_timeout</code> transport parameter, in milliseconds.</p>\n<p>This must only be called immediately after creating a connection, that\nis, before any packet is sent or received.</p>\n<p>The default value is infinite, that is, no timeout is used unless\nalready configured when creating the connection.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_cc_algorithm_in_handshake\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2399-2401\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_cc_algorithm_in_handshake\" class=\"fn\">set_cc_algorithm_in_handshake</a>(\n    ssl: &amp;mut SslRef,\n    algo: <a class=\"enum\" href=\"quiche/recovery/enum.CongestionControlAlgorithm.html\" title=\"enum quiche::recovery::CongestionControlAlgorithm\">CongestionControlAlgorithm</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the congestion control algorithm used.</p>\n<p>This function can only be called inside one of BoringSSLโs handshake\ncallbacks, before any packet has been sent. Calling this function any\nother time will have no effect.</p>\n<p>See <a href=\"struct.Config.html#method.set_cc_algorithm\"><code>Config::set_cc_algorithm()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_cc_algorithm_name_in_handshake\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2447-2449\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_cc_algorithm_name_in_handshake\" class=\"fn\">set_cc_algorithm_name_in_handshake</a>(\n    ssl: &amp;mut SslRef,\n    name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the congestion control algorithm used by string.</p>\n<p>This function can only be called inside one of BoringSSLโs handshake\ncallbacks, before any packet has been sent. Calling this function any\nother time will have no effect.</p>\n<p>See <a href=\"struct.Config.html#method.set_cc_algorithm_name\"><code>Config::set_cc_algorithm_name()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_initial_congestion_window_packets_in_handshake\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2465-2467\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_initial_congestion_window_packets_in_handshake\" class=\"fn\">set_initial_congestion_window_packets_in_handshake</a>(\n    ssl: &amp;mut SslRef,\n    packets: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets initial congestion window size in terms of packet count.</p>\n<p>This function can only be called inside one of BoringSSLโs handshake\ncallbacks, before any packet has been sent. Calling this function any\nother time will have no effect.</p>\n<p>See <a href=\"struct.Config.html#method.set_initial_congestion_window_packets\"><code>Config::set_initial_congestion_window_packets()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_enable_relaxed_loss_threshold_in_handshake\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2486-2488\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_enable_relaxed_loss_threshold_in_handshake\" class=\"fn\">set_enable_relaxed_loss_threshold_in_handshake</a>(\n    ssl: &amp;mut SslRef,\n    enable: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Configure whether to enable relaxed loss detection on spurious loss.</p>\n<p>This function can only be called inside one of BoringSSLโs handshake\ncallbacks, before any packet has been sent. Calling this function any\nother time will have no effect.</p>\n<p>See <a href=\"struct.Config.html#method.set_enable_relaxed_loss_threshold\"><code>Config::set_enable_relaxed_loss_threshold()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_hystart_in_handshake\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2507-2509\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_hystart_in_handshake\" class=\"fn\">set_hystart_in_handshake</a>(ssl: &amp;mut SslRef, v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Configures whether to enable HyStart++.</p>\n<p>This function can only be called inside one of BoringSSLโs handshake\ncallbacks, before any packet has been sent. Calling this function any\nother time will have no effect.</p>\n<p>See <a href=\"struct.Config.html#method.enable_hystart\"><code>Config::enable_hystart()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_pacing_in_handshake\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2528-2530\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_pacing_in_handshake\" class=\"fn\">set_pacing_in_handshake</a>(ssl: &amp;mut SslRef, v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Configures whether to enable pacing.</p>\n<p>This function can only be called inside one of BoringSSLโs handshake\ncallbacks, before any packet has been sent. Calling this function any\nother time will have no effect.</p>\n<p>See <a href=\"struct.Config.html#method.enable_pacing\"><code>Config::enable_pacing()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_max_pacing_rate_in_handshake\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2549-2551\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_max_pacing_rate_in_handshake\" class=\"fn\">set_max_pacing_rate_in_handshake</a>(\n    ssl: &amp;mut SslRef,\n    v: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the max value for pacing rate.</p>\n<p>This function can only be called inside one of BoringSSLโs handshake\ncallbacks, before any packet has been sent. Calling this function any\nother time will have no effect.</p>\n<p>See <a href=\"struct.Config.html#method.set_max_pacing_rate\"><code>Config::set_max_pacing_rate()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_max_send_udp_payload_size_in_handshake\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2570-2572\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_max_send_udp_payload_size_in_handshake\" class=\"fn\">set_max_send_udp_payload_size_in_handshake</a>(\n    ssl: &amp;mut SslRef,\n    v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the maximum outgoing UDP payload size.</p>\n<p>This function can only be called inside one of BoringSSLโs handshake\ncallbacks, before any packet has been sent. Calling this function any\nother time will have no effect.</p>\n<p>See <a href=\"struct.Config.html#method.set_max_send_udp_payload_size\"><code>Config::set_max_send_udp_payload_size()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_send_capacity_factor_in_handshake\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2591-2593\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_send_capacity_factor_in_handshake\" class=\"fn\">set_send_capacity_factor_in_handshake</a>(\n    ssl: &amp;mut SslRef,\n    v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the send capacity factor.</p>\n<p>This function can only be called inside one of BoringSSLโs handshake\ncallbacks, before any packet has been sent. Calling this function any\nother time will have no effect.</p>\n<p>See <a href=\"quiche/struct.Config.html#method.set_send_capacity_factor\" title=\"method quiche::Config::set_send_capacity_factor\"><code>Config::set_send_capacity_factor()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_discover_pmtu_in_handshake\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2612-2614\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_discover_pmtu_in_handshake\" class=\"fn\">set_discover_pmtu_in_handshake</a>(\n    ssl: &amp;mut SslRef,\n    discover: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Configures whether to do path MTU discovery.</p>\n<p>This function can only be called inside one of BoringSSLโs handshake\ncallbacks, before any packet has been sent. Calling this function any\nother time will have no effect.</p>\n<p>See <a href=\"struct.Config.html#method.discover_pmtu\"><code>Config::discover_pmtu()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_max_idle_timeout_in_handshake\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2633-2635\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_max_idle_timeout_in_handshake\" class=\"fn\">set_max_idle_timeout_in_handshake</a>(\n    ssl: &amp;mut SslRef,\n    v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the <code>max_idle_timeout</code> transport parameter, in milliseconds.</p>\n<p>This function can only be called inside one of BoringSSLโs handshake\ncallbacks, before any packet has been sent. Calling this function any\nother time will have no effect.</p>\n<p>See <a href=\"struct.Config.html#method.set_max_idle_timeout\"><code>Config::set_max_idle_timeout()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_initial_max_streams_bidi_in_handshake\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2658-2660\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.set_initial_max_streams_bidi_in_handshake\" class=\"fn\">set_initial_max_streams_bidi_in_handshake</a>(\n    ssl: &amp;mut SslRef,\n    v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the <code>initial_max_streams_bidi</code> transport parameter.</p>\n<p>This function can only be called inside one of BoringSSLโs handshake\ncallbacks, before any packet has been sent. Calling this function any\nother time will have no effect.</p>\n<p>See <a href=\"struct.Config.html#method.set_initial_max_streams_bidi\"><code>Config::set_initial_max_streams_bidi()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.recv\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#2739\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.recv\" class=\"fn\">recv</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>], info: <a class=\"struct\" href=\"quiche/struct.RecvInfo.html\" title=\"struct quiche::RecvInfo\">RecvInfo</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Processes QUIC packets received from the peer.</p>\n<p>On success the number of bytes processed from the input buffer is\nreturned. On error the connection will be closed by calling <a href=\"struct.Connection.html#method.close\"><code>close()</code></a>\nwith the appropriate error code.</p>\n<p>Coalesced packets will be processed as necessary.</p>\n<p>Note that the contents of the input buffer <code>buf</code> might be modified by\nthis function due to, for example, in-place decryption.</p>\n<h6 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">ยง</a>Examples:</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">loop </span>{\n    <span class=\"kw\">let </span>(read, from) = socket.recv_from(<span class=\"kw-2\">&amp;mut </span>buf).unwrap();\n\n    <span class=\"kw\">let </span>recv_info = quiche::RecvInfo {\n        from,\n        to: local,\n    };\n\n    <span class=\"kw\">let </span>read = <span class=\"kw\">match </span>conn.recv(<span class=\"kw-2\">&amp;mut </span>buf[..read], recv_info) {\n        <span class=\"prelude-val\">Ok</span>(v) =&gt; v,\n\n        <span class=\"prelude-val\">Err</span>(e) =&gt; {\n            <span class=\"comment\">// An error occurred, handle it.\n            </span><span class=\"kw\">break</span>;\n        },\n    };\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#3726\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.send\" class=\"fn\">send</a>(&amp;mut self, out: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"quiche/struct.SendInfo.html\" title=\"struct quiche::SendInfo\">SendInfo</a>), <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Writes a single QUIC packet to be sent to the peer.</p>\n<p>On success the number of bytes written to the output buffer is\nreturned, or <a href=\"enum.Error.html#variant.Done\"><code>Done</code></a> if there was nothing to write.</p>\n<p>The application should call <code>send()</code> multiple times until <a href=\"enum.Error.html#variant.Done\"><code>Done</code></a> is\nreturned, indicating that there are no more packets to send. It is\nrecommended that <code>send()</code> be called in the following cases:</p>\n<ul>\n<li>\n<p>When the application receives QUIC packets from the peer (that is,\nany time <a href=\"struct.Connection.html#method.recv\"><code>recv()</code></a> is also called).</p>\n</li>\n<li>\n<p>When the connection timer expires (that is, any time <a href=\"struct.Connection.html#method.on_timeout\"><code>on_timeout()</code></a>\nis also called).</p>\n</li>\n<li>\n<p>When the application sends data to the peer (for example, any time\n<a href=\"struct.Connection.html#method.stream_send\"><code>stream_send()</code></a> or <a href=\"struct.Connection.html#method.stream_shutdown\"><code>stream_shutdown()</code></a> are called).</p>\n</li>\n<li>\n<p>When the application receives data from the peer (for example any\ntime <a href=\"struct.Connection.html#method.stream_recv\"><code>stream_recv()</code></a> is called).</p>\n</li>\n</ul>\n<p>Once <a href=\"struct.Connection.html#method.is_draining\"><code>is_draining()</code></a> returns <code>true</code>, it is no longer necessary to call\n<code>send()</code> and all calls will return <a href=\"enum.Error.html#variant.Done\"><code>Done</code></a>.</p>\n<h6 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">ยง</a>Examples:</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">loop </span>{\n    <span class=\"kw\">let </span>(write, send_info) = <span class=\"kw\">match </span>conn.send(<span class=\"kw-2\">&amp;mut </span>out) {\n        <span class=\"prelude-val\">Ok</span>(v) =&gt; v,\n\n        <span class=\"prelude-val\">Err</span>(quiche::Error::Done) =&gt; {\n            <span class=\"comment\">// Done writing.\n            </span><span class=\"kw\">break</span>;\n        },\n\n        <span class=\"prelude-val\">Err</span>(e) =&gt; {\n            <span class=\"comment\">// An error occurred, handle it.\n            </span><span class=\"kw\">break</span>;\n        },\n    };\n\n    socket.send_to(<span class=\"kw-2\">&amp;</span>out[..write], <span class=\"kw-2\">&amp;</span>send_info.to).unwrap();\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send_on_path\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#3813-3816\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.send_on_path\" class=\"fn\">send_on_path</a>(\n    &amp;mut self,\n    out: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n    from: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>&gt;,\n    to: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"quiche/struct.SendInfo.html\" title=\"struct quiche::SendInfo\">SendInfo</a>), <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Writes a single QUIC packet to be sent to the peer from the specified\nlocal address <code>from</code> to the destination address <code>to</code>.</p>\n<p>The behavior of this method differs depending on the value of the <code>from</code>\nand <code>to</code> parameters:</p>\n<ul>\n<li>\n<p>If both are <code>Some</code>, then the method only consider the 4-tuple\n(<code>from</code>, <code>to</code>). Application can monitor the 4-tuple availability,\neither by monitoring <a href=\"struct.Connection.html#method.path_event_next\"><code>path_event_next()</code></a> events or by relying on\nthe <a href=\"struct.Connection.html#method.paths_iter\"><code>paths_iter()</code></a> method. If the provided 4-tuple does not exist\non the connection (anymore), it returns an <a href=\"enum.Error.html#InvalidState\"><code>InvalidState</code></a>.</p>\n</li>\n<li>\n<p>If <code>from</code> is <code>Some</code> and <code>to</code> is <code>None</code>, then the method only\nconsiders sending packets on paths having <code>from</code> as local address.</p>\n</li>\n<li>\n<p>If <code>to</code> is <code>Some</code> and <code>from</code> is <code>None</code>, then the method only\nconsiders sending packets on paths having <code>to</code> as peer address.</p>\n</li>\n<li>\n<p>If both are <code>None</code>, all available paths are considered.</p>\n</li>\n</ul>\n<p>On success the number of bytes written to the output buffer is\nreturned, or <a href=\"enum.Error.html#variant.Done\"><code>Done</code></a> if there was nothing to write.</p>\n<p>The application should call <code>send_on_path()</code> multiple times until\n<a href=\"enum.Error.html#variant.Done\"><code>Done</code></a> is returned, indicating that there are no more packets to\nsend. It is recommended that <code>send_on_path()</code> be called in the\nfollowing cases:</p>\n<ul>\n<li>\n<p>When the application receives QUIC packets from the peer (that is,\nany time <a href=\"struct.Connection.html#method.recv\"><code>recv()</code></a> is also called).</p>\n</li>\n<li>\n<p>When the connection timer expires (that is, any time <a href=\"struct.Connection.html#method.on_timeout\"><code>on_timeout()</code></a>\nis also called).</p>\n</li>\n<li>\n<p>When the application sends data to the peer (for examples, any time\n<a href=\"struct.Connection.html#method.stream_send\"><code>stream_send()</code></a> or <a href=\"struct.Connection.html#method.stream_shutdown\"><code>stream_shutdown()</code></a> are called).</p>\n</li>\n<li>\n<p>When the application receives data from the peer (for example any\ntime <a href=\"struct.Connection.html#method.stream_recv\"><code>stream_recv()</code></a> is called).</p>\n</li>\n</ul>\n<p>Once <a href=\"struct.Connection.html#method.is_draining\"><code>is_draining()</code></a> returns <code>true</code>, it is no longer necessary to call\n<code>send_on_path()</code> and all calls will return <a href=\"enum.Error.html#variant.Done\"><code>Done</code></a>.</p>\n<h6 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">ยง</a>Examples:</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">loop </span>{\n    <span class=\"kw\">let </span>(write, send_info) = <span class=\"kw\">match </span>conn.send_on_path(<span class=\"kw-2\">&amp;mut </span>out, <span class=\"prelude-val\">Some</span>(local), <span class=\"prelude-val\">Some</span>(peer)) {\n        <span class=\"prelude-val\">Ok</span>(v) =&gt; v,\n\n        <span class=\"prelude-val\">Err</span>(quiche::Error::Done) =&gt; {\n            <span class=\"comment\">// Done writing.\n            </span><span class=\"kw\">break</span>;\n        },\n\n        <span class=\"prelude-val\">Err</span>(e) =&gt; {\n            <span class=\"comment\">// An error occurred, handle it.\n            </span><span class=\"kw\">break</span>;\n        },\n    };\n\n    socket.send_to(<span class=\"kw-2\">&amp;</span>out[..write], <span class=\"kw-2\">&amp;</span>send_info.to).unwrap();\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_next_release_time\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5207\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.get_next_release_time\" class=\"fn\">get_next_release_time</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;ReleaseDecision&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the desired send time for the next packet.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gcongestion_enabled\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5219\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.gcongestion_enabled\" class=\"fn\">gcongestion_enabled</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns whether gcongestion is enabled.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_release_into_future\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5227\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.max_release_into_future\" class=\"fn\">max_release_into_future</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Returns the maximum pacing into the future.</p>\n<p>Equals 1/8 of the smoothed RTT, but at least 1ms and not greater than\n5ms.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pacing_enabled\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5238\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.pacing_enabled\" class=\"fn\">pacing_enabled</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether pacing is enabled.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send_quantum\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5251\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.send_quantum\" class=\"fn\">send_quantum</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the size of the send quantum, in bytes.</p>\n<p>This represents the maximum size of a packet burst as determined by the\ncongestion control algorithm in use.</p>\n<p>Applications can, for example, use it in conjunction with segmentation\noffloading mechanisms as the maximum limit for outgoing aggregates of\nmultiple packets.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send_quantum_on_path\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5269-5271\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.send_quantum_on_path\" class=\"fn\">send_quantum_on_path</a>(\n    &amp;self,\n    local_addr: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>,\n    peer_addr: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the size of the send quantum over the given 4-tuple, in bytes.</p>\n<p>This represents the maximum size of a packet burst as determined by the\ncongestion control algorithm in use.</p>\n<p>Applications can, for example, use it in conjunction with segmentation\noffloading mechanisms as the maximum limit for outgoing aggregates of\nmultiple packets.</p>\n<p>If the (<code>local_addr</code>, peer_addr`) 4-tuple relates to a non-existing\npath, this method returns 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_recv\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5309-5311\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.stream_recv\" class=\"fn\">stream_recv</a>(\n    &amp;mut self,\n    stream_id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>,\n    out: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>), <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Reads contiguous data from a stream into the provided slice.</p>\n<p>The slice must be sized by the caller and will be populated up to its\ncapacity.</p>\n<p>On success the amount of bytes read and a flag indicating the fin state\nis returned as a tuple, or <a href=\"enum.Error.html#variant.Done\"><code>Done</code></a> if there is no data to read.</p>\n<p>Reading data from a stream may trigger queueing of control messages\n(e.g. MAX_STREAM_DATA). <a href=\"struct.Connection.html#method.send\"><code>send()</code></a> should be called after reading.</p>\n<h6 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">ยง</a>Examples:</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">while let </span><span class=\"prelude-val\">Ok</span>((read, fin)) = conn.stream_recv(stream_id, <span class=\"kw-2\">&amp;mut </span>buf) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Got {} bytes on stream {}\"</span>, read, stream_id);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_send\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5443-5445\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.stream_send\" class=\"fn\">stream_send</a>(\n    &amp;mut self,\n    stream_id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>,\n    buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n    fin: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Writes data to a stream.</p>\n<p>On success the number of bytes written is returned, or <a href=\"enum.Error.html#variant.Done\"><code>Done</code></a> if no\ndata was written (e.g. because the stream has no capacity).</p>\n<p>Applications can provide a 0-length buffer with the fin flag set to\ntrue. This will lead to a 0-length FIN STREAM frame being sent at the\nlatest offset. The <code>Ok(0)</code> value is only returned when the application\nprovided a 0-length buffer.</p>\n<p>In addition, if the peer has signalled that it doesnโt want to receive\nany more data from this stream by sending the <code>STOP_SENDING</code> frame, the\n<a href=\"enum.Error.html#variant.StreamStopped\"><code>StreamStopped</code></a> error will be returned instead of any data.</p>\n<p>Note that in order to avoid buffering an infinite amount of data in the\nstreamโs send buffer, streams are only allowed to buffer outgoing data\nup to the amount that the peer allows it to send (that is, up to the\nstreamโs outgoing flow control capacity).</p>\n<p>This means that the number of written bytes returned can be lower than\nthe length of the input buffer when the stream doesnโt have enough\ncapacity for the operation to complete. The application should retry the\noperation once the stream is reported as writable again.</p>\n<p>Applications should call this method only after the handshake is\ncompleted (whenever <a href=\"struct.Connection.html#method.is_established\"><code>is_established()</code></a> returns <code>true</code>) or during\nearly data if enabled (whenever <a href=\"struct.Connection.html#method.is_in_early_data\"><code>is_in_early_data()</code></a> returns <code>true</code>).</p>\n<h6 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">ยง</a>Examples:</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>conn.stream_send(stream_id, <span class=\"string\">b\"hello\"</span>, <span class=\"bool-val\">true</span>)<span class=\"question-mark\">?</span>;</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_send_zc\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5467-5471\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.stream_send_zc\" class=\"fn\">stream_send_zc</a>(\n    &amp;mut self,\n    stream_id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>,\n    buf: &lt;F as <a class=\"trait\" href=\"quiche/range_buf/trait.BufFactory.html\" title=\"trait quiche::range_buf::BufFactory\">BufFactory</a>&gt;::<a class=\"associatedtype\" href=\"quiche/range_buf/trait.BufFactory.html#associatedtype.Buf\" title=\"type quiche::range_buf::BufFactory::Buf\">Buf</a>,\n    len: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    fin: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;F as <a class=\"trait\" href=\"quiche/range_buf/trait.BufFactory.html\" title=\"trait quiche::range_buf::BufFactory\">BufFactory</a>&gt;::<a class=\"associatedtype\" href=\"quiche/range_buf/trait.BufFactory.html#associatedtype.Buf\" title=\"type quiche::range_buf::BufFactory::Buf\">Buf</a>&gt;), <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;<div class=\"where\">where\n    &lt;F as <a class=\"trait\" href=\"quiche/range_buf/trait.BufFactory.html\" title=\"trait quiche::range_buf::BufFactory\">BufFactory</a>&gt;::<a class=\"associatedtype\" href=\"quiche/range_buf/trait.BufFactory.html#associatedtype.Buf\" title=\"type quiche::range_buf::BufFactory::Buf\">Buf</a>: <a class=\"trait\" href=\"quiche/range_buf/trait.BufSplit.html\" title=\"trait quiche::range_buf::BufSplit\">BufSplit</a>,</div></h4></section></summary><div class=\"docblock\"><p>Writes data to a stream with zero copying, instead, it appends the\nprovided buffer directly to the send queue if the capacity allows\nit.</p>\n<p>When a partial write happens (including when <a href=\"quiche/enum.Error.html#variant.Done\" title=\"variant quiche::Error::Done\"><code>Error::Done</code></a> is\nreturned) the remaining (unwritten) buffer will also be returned.\nThe application should retry the operation once the stream is\nreported as writable again.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_priority\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5644-5646\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.stream_priority\" class=\"fn\">stream_priority</a>(\n    &amp;mut self,\n    stream_id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>,\n    urgency: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>,\n    incremental: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the priority for a stream.</p>\n<p>A streamโs priority determines the order in which stream data is sent\non the wire (streams with lower priority are sent first). Streams are\ncreated with a default priority of <code>127</code>.</p>\n<p>The target stream is created if it did not exist before calling this\nmethod.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_shutdown\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5705-5707\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.stream_shutdown\" class=\"fn\">stream_shutdown</a>(\n    &amp;mut self,\n    stream_id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>,\n    direction: <a class=\"enum\" href=\"quiche/enum.Shutdown.html\" title=\"enum quiche::Shutdown\">Shutdown</a>,\n    err: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Shuts down reading or writing from/to the specified stream.</p>\n<p>When the <code>direction</code> argument is set to <a href=\"enum.Shutdown.html#variant.Read\"><code>Shutdown::Read</code></a>, outstanding\ndata in the streamโs receive buffer is dropped, and no additional data\nis added to it. Data received after calling this method is still\nvalidated and acked but not stored, and <a href=\"struct.Connection.html#method.stream_recv\"><code>stream_recv()</code></a> will not\nreturn it to the application. In addition, a <code>STOP_SENDING</code> frame will\nbe sent to the peer to signal it to stop sending data.</p>\n<p>When the <code>direction</code> argument is set to <a href=\"enum.Shutdown.html#variant.Write\"><code>Shutdown::Write</code></a>, outstanding\ndata in the streamโs send buffer is dropped, and no additional data is\nadded to it. Data passed to <a href=\"struct.Connection.html#method.stream_send\"><code>stream_send()</code></a> after calling this method\nwill be ignored. In addition, a <code>RESET_STREAM</code> frame will be sent to the\npeer to signal the reset.</p>\n<p>Locally-initiated unidirectional streams can only be closed in the\n<a href=\"enum.Shutdown.html#variant.Write\"><code>Shutdown::Write</code></a> direction. Remotely-initiated unidirectional streams\ncan only be closed in the <a href=\"enum.Shutdown.html#variant.Read\"><code>Shutdown::Read</code></a> direction. Using an\nincorrect direction will return <a href=\"enum.Error.html#variant.InvalidStreamState\"><code>InvalidStreamState</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5787\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.stream_capacity\" class=\"fn\">stream_capacity</a>(&amp;self, stream_id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the streamโs send capacity in bytes.</p>\n<p>If the specified stream doesnโt exist (including when it has already\nbeen completed and closed), the <a href=\"enum.Error.html#variant.InvalidStreamState\"><code>InvalidStreamState</code></a> error will be\nreturned.</p>\n<p>In addition, if the peer has signalled that it doesnโt want to receive\nany more data from this stream by sending the <code>STOP_SENDING</code> frame, the\n<a href=\"enum.Error.html#variant.StreamStopped\"><code>StreamStopped</code></a> error will be returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_readable_next\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5808\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.stream_readable_next\" class=\"fn\">stream_readable_next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the next stream that has data to read.</p>\n<p>Note that once returned by this method, a stream ID will not be returned\nagain until it is โre-armedโ.</p>\n<p>The application will need to read all of the pending data on the stream,\nand new data has to be received before the stream is reported again.</p>\n<p>This is unlike the <a href=\"struct.Connection.html#method.readable\"><code>readable()</code></a> method, that returns the same list of\nreadable streams when called multiple times in succession.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_readable\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5817\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.stream_readable\" class=\"fn\">stream_readable</a>(&amp;self, stream_id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the stream has data that can be read.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_writable_next\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5842\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.stream_writable_next\" class=\"fn\">stream_writable_next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the next stream that can be written to.</p>\n<p>Note that once returned by this method, a stream ID will not be returned\nagain until it is โre-armedโ.</p>\n<p>This is unlike the <a href=\"struct.Connection.html#method.writable\"><code>writable()</code></a> method, that returns the same list of\nwritable streams when called multiple times in succession. It is not\nadvised to use both <code>stream_writable_next()</code> and <a href=\"struct.Connection.html#method.writable\"><code>writable()</code></a> on the\nsame connection, as it may lead to unexpected results.</p>\n<p>The <a href=\"struct.Connection.html#method.stream_writable\"><code>stream_writable()</code></a> method can also be used to fine-tune when a\nstream is reported as writable again.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_writable\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5901-5903\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.stream_writable\" class=\"fn\">stream_writable</a>(\n    &amp;mut self,\n    stream_id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>,\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns true if the stream has enough send capacity.</p>\n<p>When <code>len</code> more bytes can be buffered into the given streamโs send\nbuffer, <code>true</code> will be returned, <code>false</code> otherwise.</p>\n<p>In the latter case, if the additional data canโt be buffered due to\nflow control limits, the peer will also be notified, and a โlow send\nwatermarkโ will be set for the stream, such that it is not going to be\nreported as writable again by <a href=\"struct.Connection.html#method.stream_writable_next\"><code>stream_writable_next()</code></a> until its send\ncapacity reaches <code>len</code>.</p>\n<p>If the specified stream doesnโt exist (including when it has already\nbeen completed and closed), the <a href=\"enum.Error.html#variant.InvalidStreamState\"><code>InvalidStreamState</code></a> error will be\nreturned.</p>\n<p>In addition, if the peer has signalled that it doesnโt want to receive\nany more data from this stream by sending the <code>STOP_SENDING</code> frame, the\n<a href=\"enum.Error.html#variant.StreamStopped\"><code>StreamStopped</code></a> error will be returned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_finished\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5952\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.stream_finished\" class=\"fn\">stream_finished</a>(&amp;self, stream_id: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if all the data has been read from the specified stream.</p>\n<p>This instructs the application that all the data received from the\npeer on the stream has been read, and there wonโt be anymore in the\nfuture.</p>\n<p>Basically this returns true when the peer either set the <code>fin</code> flag\nfor the stream, or sent <code>RESET_STREAM</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peer_streams_left_bidi\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5968\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.peer_streams_left_bidi\" class=\"fn\">peer_streams_left_bidi</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of bidirectional streams that can be created\nbefore the peerโs stream count limit is reached.</p>\n<p>This can be useful to know if itโs possible to create a bidirectional\nstream without trying it first.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peer_streams_left_uni\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#5978\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.peer_streams_left_uni\" class=\"fn\">peer_streams_left_uni</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of unidirectional streams that can be created\nbefore the peerโs stream count limit is reached.</p>\n<p>This can be useful to know if itโs possible to create a unidirectional\nstream without trying it first.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.readable\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6009\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.readable\" class=\"fn\">readable</a>(&amp;self) -&gt; <a class=\"struct\" href=\"quiche/stream/struct.StreamIter.html\" title=\"struct quiche::stream::StreamIter\">StreamIter</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over streams that have outstanding data to read.</p>\n<p>Note that the iterator will only include streams that were readable at\nthe time the iterator itself was created (i.e. when <code>readable()</code> was\ncalled). To account for newly readable streams, the iterator needs to\nbe created again.</p>\n<h6 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">ยง</a>Examples:</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate over readable streams.\n</span><span class=\"kw\">for </span>stream_id <span class=\"kw\">in </span>conn.readable() {\n    <span class=\"comment\">// Stream is readable, read until there's no more data.\n    </span><span class=\"kw\">while let </span><span class=\"prelude-val\">Ok</span>((read, fin)) = conn.stream_recv(stream_id, <span class=\"kw-2\">&amp;mut </span>buf) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Got {} bytes on stream {}\"</span>, read, stream_id);\n    }\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writable\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6052\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.writable\" class=\"fn\">writable</a>(&amp;self) -&gt; <a class=\"struct\" href=\"quiche/stream/struct.StreamIter.html\" title=\"struct quiche::stream::StreamIter\">StreamIter</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over streams that can be written in priority order.</p>\n<p>The priority order is based on RFC 9218 scheduling recommendations.\nStream priority can be controlled using <a href=\"struct.Connection.html#method.stream_priority\"><code>stream_priority()</code></a>. In order\nto support fairness requirements, each time this method is called,\ninternal state is updated. Therefore the iterator ordering can change\nbetween calls, even if no streams were added or removed.</p>\n<p>A โwritableโ stream is a stream that has enough flow control capacity to\nsend data to the peer. To avoid buffering an infinite amount of data,\nstreams are only allowed to buffer outgoing data up to the amount that\nthe peer allows to send.</p>\n<p>Note that the iterator will only include streams that were writable at\nthe time the iterator itself was created (i.e. when <code>writable()</code> was\ncalled). To account for newly writable streams, the iterator needs to be\ncreated again.</p>\n<h6 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">ยง</a>Examples:</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate over writable streams.\n</span><span class=\"kw\">for </span>stream_id <span class=\"kw\">in </span>conn.writable() {\n    <span class=\"comment\">// Stream is writable, write some data.\n    </span><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(written) = conn.stream_send(stream_id, <span class=\"kw-2\">&amp;</span>buf, <span class=\"bool-val\">false</span>) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Written {} bytes on stream {}\"</span>, written, stream_id);\n    }\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_send_udp_payload_size\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6075\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.max_send_udp_payload_size\" class=\"fn\">max_send_udp_payload_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the maximum possible size of egress UDP payloads.</p>\n<p>This is the maximum size of UDP payloads that can be sent, and depends\non both the configured maximum send payload size of the local endpoint\n(as configured with <a href=\"struct.Config.html#method.set_max_send_udp_payload_size\"><code>set_max_send_udp_payload_size()</code></a>), as well as\nthe transport parameter advertised by the remote peer.</p>\n<p>Note that this value can change during the lifetime of the connection,\nbut should remain stable across consecutive calls to <a href=\"struct.Connection.html#method.send\"><code>send()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send_ack_eliciting\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6106\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.send_ack_eliciting\" class=\"fn\">send_ack_eliciting</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule an ack-eliciting packet on the active path.</p>\n<p>QUIC packets might not contain ack-eliciting frames during normal\noperating conditions. If the packet would already contain\nack-eliciting frames, this method does not change any behavior.\nHowever, if the packet would not ordinarily contain ack-eliciting\nframes, this method ensures that a PING frame sent.</p>\n<p>Calling this method multiple times before <a href=\"struct.Connection.html#method.send\"><code>send()</code></a> has no effect.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send_ack_eliciting_on_path\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6121-6123\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.send_ack_eliciting_on_path\" class=\"fn\">send_ack_eliciting_on_path</a>(\n    &amp;mut self,\n    local: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>,\n    peer: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Schedule an ack-eliciting packet on the specified path.</p>\n<p>See <a href=\"struct.Connection.html#method.send_ack_eliciting\"><code>send_ack_eliciting()</code></a> for more detail. <a href=\"enum.Error.html#variant.InvalidState\"><code>InvalidState</code></a> is\nreturned if there is no record of the path.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dgram_recv\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6164\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.dgram_recv\" class=\"fn\">dgram_recv</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Reads the first received DATAGRAM.</p>\n<p>On success the DATAGRAMโs data is returned along with its size.</p>\n<p><a href=\"enum.Error.html#variant.Done\"><code>Done</code></a> is returned if there is no data to read.</p>\n<p><a href=\"enum.Error.html#variant.BufferTooShort\"><code>BufferTooShort</code></a> is returned if the provided buffer is too small for\nthe DATAGRAM.</p>\n<h6 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">ยง</a>Examples:</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dgram_buf = [<span class=\"number\">0</span>; <span class=\"number\">512</span>];\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Ok</span>((len)) = conn.dgram_recv(<span class=\"kw-2\">&amp;mut </span>dgram_buf) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Got {} bytes of DATAGRAM\"</span>, len);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dgram_recv_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6186\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.dgram_recv_vec\" class=\"fn\">dgram_recv_vec</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Reads the first received DATAGRAM.</p>\n<p>This is the same as <a href=\"struct.Connection.html#method.dgram_recv\"><code>dgram_recv()</code></a> but returns the DATAGRAM as a\n<code>Vec&lt;u8&gt;</code> instead of copying into the provided buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dgram_recv_peek\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6208\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.dgram_recv_peek\" class=\"fn\">dgram_recv_peek</a>(\n    &amp;self,\n    buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n    len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Reads the first received DATAGRAM without removing it from the queue.</p>\n<p>On success the DATAGRAMโs data is returned along with the actual number\nof bytes peeked. The requested length cannot exceed the DATAGRAMโs\nactual length.</p>\n<p><a href=\"enum.Error.html#variant.Done\"><code>Done</code></a> is returned if there is no data to read.</p>\n<p><a href=\"enum.Error.html#variant.BufferTooShort\"><code>BufferTooShort</code></a> is returned if the provided buffer is smaller the\nnumber of bytes to peek.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dgram_recv_front_len\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6214\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.dgram_recv_front_len\" class=\"fn\">dgram_recv_front_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the length of the first stored DATAGRAM.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dgram_recv_queue_len\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6220\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.dgram_recv_queue_len\" class=\"fn\">dgram_recv_queue_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of items in the DATAGRAM receive queue.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dgram_recv_queue_byte_size\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6226\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.dgram_recv_queue_byte_size\" class=\"fn\">dgram_recv_queue_byte_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the total size of all items in the DATAGRAM receive queue.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dgram_send_queue_len\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6232\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.dgram_send_queue_len\" class=\"fn\">dgram_send_queue_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of items in the DATAGRAM send queue.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dgram_send_queue_byte_size\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6238\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.dgram_send_queue_byte_size\" class=\"fn\">dgram_send_queue_byte_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the total size of all items in the DATAGRAM send queue.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_dgram_send_queue_full\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6244\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.is_dgram_send_queue_full\" class=\"fn\">is_dgram_send_queue_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether or not the DATAGRAM send queue is full.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_dgram_recv_queue_full\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6250\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.is_dgram_recv_queue_full\" class=\"fn\">is_dgram_recv_queue_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether or not the DATAGRAM recv queue is full.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dgram_send\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6286\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.dgram_send\" class=\"fn\">dgram_send</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sends data in a DATAGRAM frame.</p>\n<p><a href=\"enum.Error.html#variant.Done\"><code>Done</code></a> is returned if no data was written.\n<a href=\"enum.Error.html#variant.InvalidState\"><code>InvalidState</code></a> is returned if the peer does not support DATAGRAM.\n<a href=\"enum.Error.html#variant.BufferTooShort\"><code>BufferTooShort</code></a> is returned if the DATAGRAM frame length is larger\nthan peerโs supported DATAGRAM frame length. Use\n<a href=\"struct.Connection.html#method.dgram_max_writable_len\"><code>dgram_max_writable_len()</code></a> to get the largest supported DATAGRAM\nframe length.</p>\n<p>Note that there is no flow control of DATAGRAM frames, so in order to\navoid buffering an infinite amount of frames we apply an internal\nlimit.</p>\n<h6 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">ยง</a>Examples:</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>conn.dgram_send(<span class=\"string\">b\"hello\"</span>)<span class=\"question-mark\">?</span>;</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dgram_send_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6316\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.dgram_send_vec\" class=\"fn\">dgram_send_vec</a>(&amp;mut self, buf: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sends data in a DATAGRAM frame.</p>\n<p>This is the same as <a href=\"struct.Connection.html#method.dgram_send\"><code>dgram_send()</code></a> but takes a <code>Vec&lt;u8&gt;</code> instead of\na slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dgram_purge_outgoing\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6357\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.dgram_purge_outgoing\" class=\"fn\">dgram_purge_outgoing</a>&lt;FN&gt;(&amp;mut self, f: FN)<div class=\"where\">where\n    FN: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Purges queued outgoing DATAGRAMs matching the predicate.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;e)</code> returns true.</p>\n<h6 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">ยง</a>Examples:</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>conn.dgram_send(<span class=\"string\">b\"hello\"</span>)<span class=\"question-mark\">?</span>;\nconn.dgram_purge_outgoing(<span class=\"kw-2\">&amp;</span>|d: <span class=\"kw-2\">&amp;</span>[u8]| -&gt; bool { d[<span class=\"number\">0</span>] == <span class=\"number\">0 </span>});</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dgram_max_writable_len\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6384\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.dgram_max_writable_len\" class=\"fn\">dgram_max_writable_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the maximum DATAGRAM payload that can be sent.</p>\n<p><a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned if the peer hasnโt advertised a maximum DATAGRAM\nframe size.</p>\n<h6 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">ยง</a>Examples:</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(payload_size) = conn.dgram_max_writable_len() {\n    <span class=\"kw\">if </span>payload_size &gt; <span class=\"number\">5 </span>{\n        conn.dgram_send(<span class=\"string\">b\"hello\"</span>)<span class=\"question-mark\">?</span>;\n    }\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.timeout_instant\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6423\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.timeout_instant\" class=\"fn\">timeout_instant</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/time/struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns when the next timeout event will occur.</p>\n<p>Once the timeout Instant has been reached, the <a href=\"struct.Connection.html#method.on_timeout\"><code>on_timeout()</code></a> method\nshould be called. A timeout of <code>None</code> means that the timer should be\ndisarmed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6461\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.timeout\" class=\"fn\">timeout</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the amount of time until the next timeout event.</p>\n<p>Once the given duration has elapsed, the <a href=\"struct.Connection.html#method.on_timeout\"><code>on_timeout()</code></a> method should\nbe called. A timeout of <code>None</code> means that the timer should be disarmed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_timeout\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6476\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.on_timeout\" class=\"fn\">on_timeout</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Processes a timeout event.</p>\n<p>If no timeout has occurred it does nothing.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.probe_path\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6593-6595\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.probe_path\" class=\"fn\">probe_path</a>(\n    &amp;mut self,\n    local_addr: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>,\n    peer_addr: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Requests the stack to perform path validation of the proposed 4-tuple.</p>\n<p>Probing new paths requires spare Connection IDs at both the host and the\npeer sides. If it is not the case, it raises an <a href=\"enum.Error.html#OutOfIdentifiers\"><code>OutOfIdentifiers</code></a>.</p>\n<p>The probing of new addresses can only be done by the client. The server\ncan only probe network paths that were previously advertised by\n<a href=\"enum.PathEvent.html#variant.New\"><code>PathEvent::New</code></a>. If the server tries to probe such an unseen network\npath, this call raises an <a href=\"enum.Error.html#InvalidState\"><code>InvalidState</code></a>.</p>\n<p>The caller might also want to probe an existing path. In such case, it\ntriggers a PATH_CHALLENGE frame, but it does not require spare CIDs.</p>\n<p>A server always probes a new path it observes. Calling this method is\nhence not required to validate a new path. However, a server can still\nrequest an additional path validation of the proposed 4-tuple.</p>\n<p>Calling this method several times before calling <a href=\"struct.Connection.html#method.send\"><code>send()</code></a> or\n<a href=\"struct.Connection.html#method.send_on_path\"><code>send_on_path()</code></a> results in a single probe being generated. An\napplication wanting to send multiple in-flight probes must call this\nmethod again after having sent packets.</p>\n<p>Returns the Destination Connection ID sequence number associated to that\npath.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.migrate_source\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6616\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.migrate_source\" class=\"fn\">migrate_source</a>(&amp;mut self, local_addr: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Migrates the connection to a new local address <code>local_addr</code>.</p>\n<p>The behavior is similar to <a href=\"struct.Connection.html#method.migrate\"><code>migrate()</code></a>, with the nuance that the\nconnection only changes the local address, but not the peer one.</p>\n<p>See <a href=\"struct.Connection.html#method.migrate\"><code>migrate()</code></a> for the full specification of this method.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.migrate\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6635-6637\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.migrate\" class=\"fn\">migrate</a>(\n    &amp;mut self,\n    local_addr: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>,\n    peer_addr: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Migrates the connection over the given network path between <code>local_addr</code>\nand <code>peer_addr</code>.</p>\n<p>Connection migration can only be initiated by the client. Calling this\nmethod as a server returns <a href=\"enum.Error.html#InvalidState\"><code>InvalidState</code></a>.</p>\n<p>To initiate voluntary migration, there should be enough Connection IDs\nat both sides. If this requirement is not satisfied, this call returns\n<a href=\"enum.Error.html#OutOfIdentifiers\"><code>OutOfIdentifiers</code></a>.</p>\n<p>Returns the Destination Connection ID associated to that migrated path.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_scid\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6729-6731\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.new_scid\" class=\"fn\">new_scid</a>(\n    &amp;mut self,\n    scid: &amp;<a class=\"struct\" href=\"quiche/packet/struct.ConnectionId.html\" title=\"struct quiche::packet::ConnectionId\">ConnectionId</a>&lt;'_&gt;,\n    reset_token: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>,\n    retire_if_needed: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Provides additional source Connection IDs that the peer can use to reach\nthis host.</p>\n<p>This triggers sending NEW_CONNECTION_ID frames if the provided Source\nConnection ID is not already present. In the case the caller tries to\nreuse a Connection ID with a different reset token, this raises an\n<code>InvalidState</code>.</p>\n<p>At any time, the peer cannot have more Destination Connection IDs than\nthe maximum number of active Connection IDs it negotiated. In such case\n(i.e., when <a href=\"struct.Connection.html#method.scids_left\"><code>scids_left()</code></a> returns 0), if the host agrees to\nrequest the removal of previous connection IDs, it sets the\n<code>retire_if_needed</code> parameter. Otherwise, an <a href=\"enum.Error.html#IdLimit\"><code>IdLimit</code></a> is returned.</p>\n<p>Note that setting <code>retire_if_needed</code> does not prevent this function from\nreturning an <a href=\"enum.Error.html#IdLimit\"><code>IdLimit</code></a> in the case the caller wants to retire still\nunannounced Connection IDs.</p>\n<p>The caller is responsible for ensuring that the provided <code>scid</code> is not\nrepeated several times over the connection. quiche ensures that as long\nas the provided Connection ID is still in use (i.e., not retired), it\ndoes not assign a different sequence number.</p>\n<p>Note that if the host uses zero-length Source Connection IDs, it cannot\nadvertise Source Connection IDs and calling this method returns an\n<a href=\"enum.Error.html#InvalidState\"><code>InvalidState</code></a>.</p>\n<p>Returns the sequence number associated to the provided Connection ID.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.active_scids\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6743\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.active_scids\" class=\"fn\">active_scids</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of source Connection IDs that are active. This is\nonly meaningful if the host uses non-zero length Source Connection IDs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.scids_left\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6759\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.scids_left\" class=\"fn\">scids_left</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of source Connection IDs that should be provided\nto the peer without exceeding the limit it advertised.</p>\n<p>This will automatically limit the number of Connection IDs to the\nminimum between the locally configured active connection ID limit,\nand the one sent by the peer.</p>\n<p>To obtain the maximum possible value allowed by the peer an application\ncan instead inspect the <a href=\"struct.Stats.html#structfield.peer_active_conn_id_limit\"><code>peer_active_conn_id_limit</code></a> value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retire_dcid\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6787\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.retire_dcid\" class=\"fn\">retire_dcid</a>(&amp;mut self, dcid_seq: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Requests the retirement of the destination Connection ID used by the\nhost to reach its peer.</p>\n<p>This triggers sending RETIRE_CONNECTION_ID frames.</p>\n<p>If the application tries to retire a non-existing Destination Connection\nID sequence number, or if it uses zero-length Destination Connection ID,\nthis method returns an <a href=\"enum.Error.html#InvalidState\"><code>InvalidState</code></a>.</p>\n<p>At any time, the host must have at least one Destination ID. If the\napplication tries to retire the last one, or if the caller tries to\nretire the destination Connection ID used by the current active path\nwhile having neither spare Destination Connection IDs nor validated\nnetwork paths, this method returns an <a href=\"enum.Error.html#OutOfIdentifiers\"><code>OutOfIdentifiers</code></a>. This\nbehavior prevents the caller from stalling the connection due to the\nlack of validated path to send non-probing packets.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.path_event_next\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6837\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.path_event_next\" class=\"fn\">path_event_next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"quiche/path/enum.PathEvent.html\" title=\"enum quiche::path::PathEvent\">PathEvent</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Processes path-specific events.</p>\n<p>On success it returns a <a href=\"enum.PathEvent.html\"><code>PathEvent</code></a>, or <code>None</code> when there are no\nevents to report. Please refer to <a href=\"enum.PathEvent.html\"><code>PathEvent</code></a> for the exhaustive event\nlist.</p>\n<p>Note that all events are edge-triggered, meaning that once reported they\nwill not be reported again by calling this method again, until the event\nis re-armed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retired_scids\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6842\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.retired_scids\" class=\"fn\">retired_scids</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of source Connection IDs that are retired.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retired_scid_next\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6852\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.retired_scid_next\" class=\"fn\">retired_scid_next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"quiche/packet/struct.ConnectionId.html\" title=\"struct quiche::packet::ConnectionId\">ConnectionId</a>&lt;'static&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a source <code>ConnectionId</code> that has been retired.</p>\n<p>On success it returns a <a href=\"struct.ConnectionId.html\"><code>ConnectionId</code></a>, or <code>None</code> when there are no\nmore retired connection IDs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.available_dcids\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6861\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.available_dcids\" class=\"fn\">available_dcids</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of spare Destination Connection IDs, i.e.,\nDestination Connection IDs that are still unused.</p>\n<p>Note that this function returns 0 if the host uses zero length\nDestination Connection IDs.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.paths_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6912\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.paths_iter\" class=\"fn\">paths_iter</a>(&amp;self, from: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>) -&gt; <a class=\"struct\" href=\"quiche/path/struct.SocketAddrIter.html\" title=\"struct quiche::path::SocketAddrIter\">SocketAddrIter</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over destination <code>SockAddr</code>s whose association\nwith <code>from</code> forms a known QUIC path on which packets can be sent to.</p>\n<p>This function is typically used in combination with <a href=\"struct.Connection.html#method.send_on_path\"><code>send_on_path()</code></a>.</p>\n<p>Note that the iterator includes all the possible combination of\ndestination <code>SockAddr</code>s, even those whose sending is not required now.\nIn other words, this is another way for the application to recall from\npast <a href=\"enum.PathEvent.html#variant.New\"><code>PathEvent::New</code></a> events.</p>\n<h6 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">ยง</a>Examples:</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate over possible destinations for the given local `SockAddr`.\n</span><span class=\"kw\">for </span>dest <span class=\"kw\">in </span>conn.paths_iter(local) {\n    <span class=\"kw\">loop </span>{\n        <span class=\"kw\">let </span>(write, send_info) =\n            <span class=\"kw\">match </span>conn.send_on_path(<span class=\"kw-2\">&amp;mut </span>out, <span class=\"prelude-val\">Some</span>(local), <span class=\"prelude-val\">Some</span>(dest)) {\n                <span class=\"prelude-val\">Ok</span>(v) =&gt; v,\n\n                <span class=\"prelude-val\">Err</span>(quiche::Error::Done) =&gt; {\n                    <span class=\"comment\">// Done writing for this destination.\n                    </span><span class=\"kw\">break</span>;\n                },\n\n                <span class=\"prelude-val\">Err</span>(e) =&gt; {\n                    <span class=\"comment\">// An error occurred, handle it.\n                    </span><span class=\"kw\">break</span>;\n                },\n            };\n\n        socket.send_to(<span class=\"kw-2\">&amp;</span>out[..write], <span class=\"kw-2\">&amp;</span>send_info.to).unwrap();\n    }\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.close\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6954\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.close\" class=\"fn\">close</a>(&amp;mut self, app: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, err: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>, reason: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Closes the connection with the given error and reason.</p>\n<p>The <code>app</code> parameter specifies whether an application close should be\nsent to the peer. Otherwise a normal connection close is sent.</p>\n<p>If <code>app</code> is true but the connection is not in a state that is safe to\nsend an application error (not established nor in early data), in\naccordance with <a href=\"https://www.rfc-editor.org/rfc/rfc9000.html#section-10.2.3-3\">RFC\n9000</a>, the\nerror code is changed to APPLICATION_ERROR and the reason phrase is\ncleared.</p>\n<p>Returns <a href=\"enum.Error.html#variant.Done\"><code>Done</code></a> if the connection had already been closed.</p>\n<p>Note that the connection will not be closed immediately. An application\nshould continue calling the <a href=\"struct.Connection.html#method.recv\"><code>recv()</code></a>, <a href=\"struct.Connection.html#method.send\"><code>send()</code></a>, <a href=\"struct.Connection.html#method.timeout\"><code>timeout()</code></a> and\n<a href=\"struct.Connection.html#method.on_timeout\"><code>on_timeout()</code></a> methods as normal, until the <a href=\"struct.Connection.html#method.is_closed\"><code>is_closed()</code></a> method\nreturns <code>true</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trace_id\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#6994\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.trace_id\" class=\"fn\">trace_id</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Returns a string uniquely representing the connection.</p>\n<p>This can be used for logging purposes to differentiate between multiple\nconnections.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.application_proto\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7002\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.application_proto\" class=\"fn\">application_proto</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">โ</a></h4></section></summary><div class=\"docblock\"><p>Returns the negotiated ALPN protocol.</p>\n<p>If no protocol has been negotiated, the returned value is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.server_name\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7008\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.server_name\" class=\"fn\">server_name</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the server name requested by the client.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peer_cert\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7014\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.peer_cert\" class=\"fn\">peer_cert</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the peerโs leaf certificate (if any) as a DER-encoded buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peer_cert_chain\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7025\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.peer_cert_chain\" class=\"fn\">peer_cert_chain</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the peerโs certificate chain (if any) as a vector of DER-encoded\nbuffers.</p>\n<p>The certificate at index 0 is the peerโs leaf certificate, the other\ncertificates (if any) are the chain certificate authorities used to\nsign the leaf certificate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.session\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7036\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.session\" class=\"fn\">session</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the serialized cryptographic session for the connection.</p>\n<p>This can be used by a client to cache a connectionโs session, and resume\nit later using the <a href=\"struct.Connection.html#method.set_session\"><code>set_session()</code></a> method.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.source_id\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7048\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.source_id\" class=\"fn\">source_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"quiche/packet/struct.ConnectionId.html\" title=\"struct quiche::packet::ConnectionId\">ConnectionId</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the source connection ID.</p>\n<p>When there are multiple IDs, and if there is an active path, the ID used\non that path is returned. Otherwise the oldest ID is returned.</p>\n<p>Note that the value returned can change throughout the connectionโs\nlifetime.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.source_ids\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7066\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.source_ids\" class=\"fn\">source_ids</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;<a class=\"struct\" href=\"quiche/packet/struct.ConnectionId.html\" title=\"struct quiche::packet::ConnectionId\">ConnectionId</a>&lt;'_&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns all active source connection IDs.</p>\n<p>An iterator is returned for all active IDs (i.e. ones that have not\nbeen explicitly retired yet).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.destination_id\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7075\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.destination_id\" class=\"fn\">destination_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"quiche/packet/struct.ConnectionId.html\" title=\"struct quiche::packet::ConnectionId\">ConnectionId</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the destination connection ID.</p>\n<p>Note that the value returned can change throughout the connectionโs\nlifetime.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pmtu\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7093\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.pmtu\" class=\"fn\">pmtu</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the PMTU for the active path if it exists.</p>\n<p>This requires no additonal packets to be sent but simply checks if PMTUD\nhas completed and has found a valid PMTU.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.revalidate_pmtu\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7105\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.revalidate_pmtu\" class=\"fn\">revalidate_pmtu</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Revalidates the PMTU for the active path by sending a new probe packet\nof PMTU size. If the probe is dropped PMTUD will restart and find a new\nvalid PMTU.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_established\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7115\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.is_established\" class=\"fn\">is_established</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the connection handshake is complete.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_resumed\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7121\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.is_resumed\" class=\"fn\">is_resumed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the connection is resumed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_early_data\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7128\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.is_in_early_data\" class=\"fn\">is_in_early_data</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the connection has a pending handshake that has\nprogressed enough to send or receive early data.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_readable\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7134\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.is_readable\" class=\"fn\">is_readable</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether there is stream or DATAGRAM data available to read.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_path_validated\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7145-7147\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.is_path_validated\" class=\"fn\">is_path_validated</a>(\n    &amp;self,\n    from: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>,\n    to: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"enum\" href=\"quiche/enum.Error.html\" title=\"enum quiche::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns whether the network path with local address <code>from</code> and remote\naddress <code>peer</code> has been validated.</p>\n<p>If the 4-tuple does not exist over the connection, returns an\n<a href=\"enum.Error.html#variant.InvalidState\"><code>InvalidState</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_draining\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7172\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.is_draining\" class=\"fn\">is_draining</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the connection is draining.</p>\n<p>If this returns <code>true</code>, the connection object cannot yet be dropped, but\nno new application data can be sent or received. An application should\ncontinue calling the <a href=\"struct.Connection.html#method.recv\"><code>recv()</code></a>, <a href=\"struct.Connection.html#method.timeout\"><code>timeout()</code></a>, and <a href=\"struct.Connection.html#method.on_timeout\"><code>on_timeout()</code></a>\nmethods as normal, until the <a href=\"struct.Connection.html#method.is_closed\"><code>is_closed()</code></a> method returns <code>true</code>.</p>\n<p>In contrast, once <code>is_draining()</code> returns <code>true</code>, calling <a href=\"struct.Connection.html#method.send\"><code>send()</code></a>\nis not required because no new outgoing packets will be generated.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_closed\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7180\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.is_closed\" class=\"fn\">is_closed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the connection is closed.</p>\n<p>If this returns true, the connection object can be dropped.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_timed_out\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7186\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.is_timed_out\" class=\"fn\">is_timed_out</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the connection was closed due to the idle timeout.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peer_error\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7197\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.peer_error\" class=\"fn\">peer_error</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"quiche/struct.ConnectionError.html\" title=\"struct quiche::ConnectionError\">ConnectionError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the error received from the peer, if any.</p>\n<p>Note that a <code>Some</code> return value does not necessarily imply\n<a href=\"struct.Connection.html#method.is_closed\"><code>is_closed()</code></a> or any other connection state.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.local_error\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7212\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.local_error\" class=\"fn\">local_error</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"quiche/struct.ConnectionError.html\" title=\"struct quiche::ConnectionError\">ConnectionError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the error <a href=\"struct.Connection.html#method.close\"><code>close()</code></a> was called with, or internally\ncreated quiche errors, if any.</p>\n<p>Note that a <code>Some</code> return value does not necessarily imply\n<a href=\"struct.Connection.html#method.is_closed\"><code>is_closed()</code></a> or any other connection state.\n<code>Some</code> also does not guarantee that the error has been sent to\nor received by the peer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stats\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7218\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.stats\" class=\"fn\">stats</a>(&amp;self) -&gt; <a class=\"struct\" href=\"quiche/struct.Stats.html\" title=\"struct quiche::Stats\">Stats</a></h4></section></summary><div class=\"docblock\"><p>Collects and returns statistics about the connection.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.peer_transport_params\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7258\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.peer_transport_params\" class=\"fn\">peer_transport_params</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"quiche/struct.TransportParams.html\" title=\"struct quiche::TransportParams\">TransportParams</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns reference to peerโs transport parameters. Returns <code>None</code> if we\nhave not yet processed the peerโs transport parameters.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.path_stats\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7268\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.path_stats\" class=\"fn\">path_stats</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"quiche/path/struct.PathStats.html\" title=\"struct quiche::path::PathStats\">PathStats</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Collects and returns statistics about each known path for the\nconnection.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_server\" class=\"method\"><a class=\"src rightside\" href=\"src/quiche/lib.rs.html#7273\">Source</a><h4 class=\"code-header\">pub fn <a href=\"quiche/struct.Connection.html#tymethod.is_server\" class=\"fn\">is_server</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether or not this is a server-side connection.</p>\n</div></details></div></details>",0,"tokio_quiche::quic::QuicheConnection"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[127412]}